#!/usr/bin/env ruby

################################################################
# rbenv support:
# If this file is a symlink, and bound to a specific ruby
# version via rbenv (indicated by RBENV_VERSION),
# I want to resolve the symlink and re-exec
# the original executable respecting the .ruby_version
# which should indicate the right version.
#
if File.symlink?(__FILE__) and ENV["RBENV_VERSION"]
  ENV["RBENV_VERSION"] = nil
  shims_path = File.expand_path("shims", ENV["RBENV_ROOT"])
  ENV["PATH"] = shims_path + ":" + ENV["PATH"]
  exec(File.readlink(__FILE__), *ARGV)
end

gemfile = File.expand_path("../../Gemfile", __FILE__)

if File.exists?(gemfile + ".lock")
  ENV["BUNDLE_GEMFILE"] = gemfile
  require "bundler/setup"
end

Encoding.default_external = "UTF-8"
Thread.abort_on_exception = true

require "rubygems"
require "swimmy"
require "dotenv"

Dotenv.load

################################################################
### Main thread

error_count = 0
env_names = %w(SLACK_API_TOKEN SWIMMY_SHEET_ID)

env_names.each do |env_name|
  unless ENV[env_name]
    STDERR.puts "Error: env #{env_name} is not set."
    error_count += 1
  end
end

exit 1 if error_count > 0

loop do
  begin
    bot = Swimmy::App.new(token: ENV["SLACK_API_TOKEN"],
                          spreadsheet: ENV["SWIMMY_SHEET_ID"])
    bot.start!

  rescue Interrupt
    # Control-c to exit
    STDERR.puts "Interrupted exiting..."

    bot.stop!
    exit!

  rescue Exception => e
    # Maybe network error, reconnect.
    STDERR.puts "Error: #{e} (#{e.class})"
    STDERR.puts "wait 20 secs"
    bot.stop!
    sleep 20
  end
end
