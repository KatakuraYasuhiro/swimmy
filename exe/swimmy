#!/usr/bin/env ruby

################################################################
# rbenv support:
# If this file is a symlink, and bound to a specific ruby
# version via rbenv (indicated by RBENV_VERSION),
# I want to resolve the symlink and re-exec
# the original executable respecting the .ruby_version
# which should indicate the right version.
#
if File.symlink?(__FILE__) and ENV["RBENV_VERSION"]
  ENV["RBENV_VERSION"] = nil
  shims_path = File.expand_path("shims", ENV["RBENV_ROOT"])
  ENV["PATH"] = shims_path + ":" + ENV["PATH"]
  exec(File.readlink(__FILE__), *ARGV)
end

gemfile = File.expand_path("../../Gemfile", __FILE__)

if File.exists?(gemfile + ".lock")
  ENV["BUNDLE_GEMFILE"] = gemfile
  require "bundler/setup"
end

Encoding.default_external = "UTF-8"
Thread.abort_on_exception = true

require "rubygems"

require "clian"
require "sheetq"
require "swimmy"
require "logger"
require "dotenv"

Dotenv.load

################################################################
### Main thread

unless ENV["SLACK_API_TOKEN"]
  STDERR.puts "Error: env SLACK_API_TOKEN is not set."
  exit 1
end

sheetq_config_path = "~/.config/sheetq/config.yml"
sheetq_config = Sheetq::Config.create_from_file(sheetq_config_path)
sheetq_tokenstore = File.expand_path("token_store.yml", File.dirname(sheetq_config_path))

logger = ::Logger.new($stderr)
logger.formatter = proc {|severity, datetime, progname, msg| "#{datetime} #{msg}\n"}
Sheetq::Command.logger = logger

puts "#{sheetq_config.general.client_id},#{sheetq_config.general.client_secret},#{sheetq_tokenstore},#{sheetq_config.general.default_user},#{logger}"

Swimmy::Command.sheet_config = sheetq_config
client = Sheetq::GoogleClient.new(
  sheetq_config.general.client_id,
  sheetq_config.general.client_secret,
  sheetq_tokenstore,
  sheetq_config.general.default_user,
  logger
)

Sheetq::Command.client = client
spreadsheet = sheetq_config.general.default_sheet_id
puts sheetq_config.general.default_user
puts sheetq_tokenstore
puts "swimmy client: #{client}"
client.auth

Sheetq::Command::Nomnichi.new(spreadsheet, true)

loop do
  begin
    bot = Swimmy::App.new(token: ENV["SLACK_API_TOKEN"])
    bot.start!
  rescue Exception => e
    STDERR.puts "Error: #{e}"
    STDERR.puts "wait 30 secs"
    sleep 30
  end
end
